#!/usr/bin/env python

import sys
import subprocess
import wx
from os import uname
from os.path import isfile


def main():
    options = get_options()
    app = wx.App(False)
    frame = FrameMain(options)
    if not options:
        dlg = wx.MessageDialog(
            frame, 'xrandr: config not found', 'Error', wx.OK | wx.ICON_ERROR
        )
        dlg.ShowModal()
        dlg.Destroy()
        return
    frame.Show()
    app.SetTopWindow(frame)
    app.MainLoop()


def get_options():
    for file_name in [uname()[1], 'default']:
        config_file = '{}/{}.config'.format(sys.path[0], file_name)
        if isfile(config_file):
            break

    if not isfile(config_file):
        return []

    with open(config_file, 'r') as f:
        lines = f.readlines()

    IMAGE_ROOT = sys.path[0] + '/img/'
    set_panel_on_monitor = 'xfconf-query -c xfce4-panel -p /panels/panel-1/output-name --create -t string -s "monitor-{}"'
    reset_panel = 'xfconf-query -c xfce4-panel -p /panels/panel-1/output-name -r'

    options = []
    for line in lines:
        img, cmd, monitor = [x.strip() for x in line.split('|')]
        cmd_xrandr = 'xrandr ' + cmd
        cmd_set_panel = (
            reset_panel if monitor == 'auto' else set_panel_on_monitor.format(monitor)
        )
        option = {
            'commands': (cmd_xrandr, cmd_set_panel),
            'image': IMAGE_ROOT + img + '.png',
        }
        options.append(option)
    return options


class FrameMain(wx.Frame):
    def __init__(self, options):
        wx.Frame.__init__(self, None, style=wx.NO_BORDER | wx.FRAME_NO_TASKBAR)
        self.controls = {}
        self.options = options
        self.option_count = len(options)
        self.build_layout()

    def build_layout(self):
        firstRow = wx.BoxSizer(wx.HORIZONTAL)
        secondRow = wx.BoxSizer(wx.HORIZONTAL)

        for i, option in enumerate(self.options):
            button = wx.BitmapButton(
                self,
                1000 + i,
                size=(140, 80),
                bitmap=wx.Bitmap(option['image'], wx.BITMAP_TYPE_ANY),
            )
            button.Bind(wx.EVT_KEY_DOWN, self.handle_keydown)
            self.Bind(wx.EVT_BUTTON, self.hanlde_click, button)
            self.controls[i] = button

            if self.option_count % 2 != 0 or i < self.option_count / 2:
                firstRow.Add(button)
            else:
                secondRow.Add(button)

        container = wx.BoxSizer(wx.VERTICAL)
        container.Add(firstRow)
        container.Add(secondRow)
        container.Fit(self)

        self.SetSizer(container)
        self.Layout()
        if self.controls:
            self.controls[0].SetFocus()

    def apply_settings(self, index):
        for cmd in self.options[index]['commands']:
            subprocess.Popen(cmd, shell=True)
        self.Close()

    def get_current_index(self):
        return self.FindFocus().Id - 1000

    def select_next(self, delta):
        index = self.get_current_index() + delta
        self.controls[index % self.option_count].SetFocus()

    def hanlde_click(self, event):
        index = self.get_current_index()
        self.apply_settings(index)

    def handle_keydown(self, event):
        keycode = event.GetKeyCode()

        if keycode > 48 and keycode - 49 < self.option_count:
            self.apply_settings(keycode - 49)
        elif keycode == wx.WXK_TAB:
            if event.ShiftDown():
                self.select_next(-1)
            else:
                self.select_next(1)
        elif keycode == wx.WXK_RIGHT:
            self.select_next(1)
        elif keycode == wx.WXK_LEFT:
            self.select_next(-1)
        elif keycode == wx.WXK_ESCAPE:
            self.Close()

        event.Skip()


if __name__ == "__main__":
    main()
